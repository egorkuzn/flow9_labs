// 5) Реализуйте PEG-парсер для грамматики простых арифметических выражений (целые
// константы, операции + и *), который порождает дерево синтаксического разбора. Используйте
// библиотеку lingo. Преобразуйте дерево обратно в строку. Реализуйте калькулятор,
// вычисляющий значение арифметического выражения.

import runtime;
import string;
import sys/system;
import lingo/pegcode/driver;

ArithmeticsExpression ::= Addition, Multiplication, Substruction, Division, Integer;
Addition(left : ArithmeticsExpression, right : ArithmeticsExpression);
Multiplication(left : ArithmeticsExpression, right : ArithmeticsExpression);
Substruction(left : ArithmeticsExpression, right : ArithmeticsExpression);
Division(left : ArithmeticsExpression, right : ArithmeticsExpression);
Integer(val : int);


s2AST(s : string) -> ArithmeticsExpression {
    arithmetics_grammar = "#include C:\Users\egork\source\flow9\labs\2nd-block\5\arithmetics.lingo";
    parsic(compilePegGrammar(arithmetics_grammar), s, defaultPegActions);
}

AST2s(exp : ArithmeticsExpression) -> string{
    switch(exp) {
        Multiplication(l, r):
            concatStrings(["(", AST2s(l), "*", AST2s(r), ")"]);
        Division(l, r):
            concatStrings(["(", AST2s(l), "/", AST2s(r), ")"]);
        Addition(l, r):
            concatStrings(["(", AST2s(l), "+", AST2s(r), ")"]);
        Substruction(l, r):
            concatStrings(["(", AST2s(l), "-", AST2s(r), ")"]);
        Integer(val):
            i2s(val);
    }
}

AST2i(exp : ArithmeticsExpression) -> int{
    switch(exp) {
        Integer(val):
            val;
        Multiplication(l, r):
            AST2i(l) * AST2i(r);
        Division(l, r):{
            right_part = AST2i(r);
            assert(right_part != 0, "Division by zero");
            AST2i(l) / right_part;
        }
        Addition(l, r):
            AST2i(l) + AST2i(r);
        Substruction(l, r):
            AST2i(l) - AST2i(r);
    }
}

main(){
    s = readUntil("\n");
    println(s2AST(s));
    println(AST2s(s2AST(s)));
    println(AST2i(s2AST(s)));
    quit(0);
}
