// а) Реализуйте калькулятор для обратной польской записи (RPN) арифметических выражений.
// Напишите функции перевода арифметический выражений в RPN и наоборот.
// б) Степень, дроби, переменные рациональное выражение, вычисление

import runtime;
import string;
import math/math;
import sys/system;
import lingo/pegcode/parsic;
import lingo/pegcode/driver;

ArithmeticsExpression ::= Involution, Multiplication, Division, Addition, Substruction, Double, Variable;

Involution    (left : ArithmeticsExpression, right : ArithmeticsExpression);
Multiplication(left : ArithmeticsExpression, right : ArithmeticsExpression);
Division      (left : ArithmeticsExpression, right : ArithmeticsExpression);
Addition      (left : ArithmeticsExpression, right : ArithmeticsExpression);
Substruction  (left : ArithmeticsExpression, right : ArithmeticsExpression);
Double        (val  : double);
Variable      (var  : string);

arithmeticGrammarInited : ref Maybe<[PegOp]> = ref None();
RPNGrammarInited : ref Maybe<[PegOp]> = ref None();


arithmeticsGrammar() {
    onlyOnce(arithmeticGrammarInited, \ -> {
        compilePegGrammar("#include C:\Users\egork\source\flow9\labs\2nd-block\5\arithmetics.lingo")
    });
}

RPNGrammar() {
    onlyOnce(RPNGrammarInited, \ -> {
        compilePegGrammar("#include C:\Users\egork\source\flow9\labs\2nd-block\6\RPN.lingo")
    });
}

putVarsIntoTree() {
    vars = strSplit(getUrlParameter("Variables"), ",");
    fold(vars, makeTree(), \tree, var -> {setTree(tree, var, s2d(getUrlParameter(var)))});
}

AST2RPN(AST : ArithmeticsExpression) -> string {
    switch (AST) {
        Involution    (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), " ^)"]);
        Multiplication(l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), " *)"]);
        Division      (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), " /)"]);
        Addition      (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), " +)"]);
        Substruction  (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), " -)"]);
        Double        (val) : d2s(val);
        Variable      (var) : var;
    }
}

AST2s(AST : ArithmeticsExpression) -> string {
    switch (AST) {
        Involution    (l, r): concatStrings(["(", AST2s(l), " ^ ", AST2s(r), ")"]);
        Multiplication(l, r): concatStrings(["(", AST2s(l), " * ", AST2s(r), ")"]);
        Division      (l, r): concatStrings(["(", AST2s(l), " / ", AST2s(r), ")"]);
        Addition      (l, r): concatStrings(["(", AST2s(l), " + ", AST2s(r), ")"]);
        Substruction  (l, r): concatStrings(["(", AST2s(l), " - ", AST2s(r), ")"]);
        Double        (val) : d2s(val);
        Variable      (var) : var;
    }
}

s2AST(s : string) -> ArithmeticsExpression{
    parsic(arithmeticsGrammar(), s, defaultPegActions);
}

AST2d(AST : ArithmeticsExpression, varsTree: Tree<string, double>) -> double {
    switch (AST) {
        Involution    (l, r): dpow(AST2d(l, varsTree) , AST2d(r, varsTree));
        Multiplication(l, r):      AST2d(l, varsTree) * AST2d(r, varsTree);
        Division      (l, r): {a = AST2d(l, varsTree);
                               b = AST2d(r, varsTree);
                                                    a / b;}
        Addition      (l, r):      AST2d(l, varsTree) + AST2d(r, varsTree);
        Substruction  (l, r):      AST2d(l, varsTree) - AST2d(r, varsTree);
        Double        (val) : val;
        Variable      (var) : lookupTreeDef(varsTree, var, doubleMin);
    }
}

s2RPN(s : string) -> string {
    AST2RPN(s2AST(s));
}

RPN2s(RPN : string) -> string {
    AST2s(RPN2AST(RPN));
}

RPN2AST(RPN : string) ->  ArithmeticsExpression{
    parsic(RPNGrammar(), RPN, defaultPegActions);
}

RPN2d(RPN : string, varsTree: Tree<string, double>) -> double {
    AST2d(RPN2AST(RPN), varsTree);
}

simplify(AST: ArithmeticsExpression) -> ArithmeticsExpression {
    switch(AST) {
        Addition      (l, r): {
            l_ = simplify(l);
            r_ = simplify(r);

            if(l_ == Double(0.0)) {
                r_;
            } else if(r_ == Double(0.0)) {
                l_;
            } else if(r_ == l_) {
                Multiplication(Double(2.0), l_);
            } else {
                switch(l_) {
                    Multiplication(l1, r1): {
                        switch(r_) {
                            Multiplication(l2, r2):{
                                if(l1 == l2) {
                                    l1_ = simplify(l1);
                                    r1_ = simplify(r1);
                                    r2_ = simplify(r2);
                                    Multiplication(l1_, Addition(r1_, r2_));
                                } else if(r1 == r2) {
                                    l1_ = simplify(l1);
                                    r1_ = simplify(r1);
                                    l2_ = simplify(l2);
                                    Multiplication(Addition(l1_, l2_), r1_);
                                } else if(r1 == l2) {
                                    l1_ = simplify(l1);
                                    r1_ = simplify(r1);
                                    r2_ = simplify(r2);
                                    Multiplication(Addition(l1_, r2_), r1_);
                                } else if(l1 == r2) {
                                    l2_ = simplify(l2);
                                    r1_ = simplify(r1);
                                    r2_ = simplify(r2);
                                    Multiplication(Addition(l2_, r1_), r2_);
                                } else {
                                    Addition(l_, r_);
                                }
                            }

                            default: Addition(l_, r_);
                        }
                    }

                    default: Addition(l_, r_);
                }                            
            }
        }
        Substruction  (l, r): {
            l_ = simplify(l);
            r_ = simplify(r);

            if(l_ == r_) {
                Double(0.0);
            } else if(r_ == Double(0.0)) {
                l_;
            } else {
                //Пиши, если охота. Я устал
                Substruction(l_, r_);
            }            
        }
        Multiplication(l, r): {
            l_ = simplify(l);
            r_ = simplify(r);

            if(l_ == Double(1.0)) {
                r_;
            } else if(r_ == Double(1.0)) {
                l_;
            } else if(l_ == Double(0.0) || r_ == Double(0.0)){
                Double(0.0);
            } else if(l_ == r_) {
                Involution(l_, Double(2.0));
            } else {
                switch(l_) {
                    Involution(l1, r1): {
                        if(l1 == r_) {
                            Involution(simplify(l1), simplify(Addition(simplify(r1), Double(1.0))));
                        } else {
                            Multiplication(l_, r_);
                        }
                    }

                    default: switch(r_) {
                            Involution(l1, r1): {
                                if(l1 == l_) {
                                    Involution(simplify(l1), simplify(Addition(simplify(r1), Double(1.0))));
                                } else {
                                    Multiplication(l_, r_);
                                }
                            }
                            default: Multiplication(l_, r_);
                    }
                }
                Multiplication(l_, r_);                
            }
        }
        Division      (l, r): {
            l_ = simplify(l);
            r_ = simplify(r);

            if(r_ == Double(1.0)) {
                l_;
            } else if(l_ == Double(0.0)){
                Double(0.0);
            } else if(l_ == r_) {
                Double(1.0);
            } else {
                switch(l_) {
                    Involution(l1, r1): {
                        if(l1 == r_) {
                            Involution(simplify(l1), simplify(Substruction(simplify(r1), Double(1.0))));
                        } else {
                            Division(l_, r_);
                        }
                    }

                    default: Division(l_, r_);
                }
            }
        }
        Involution    (l, r): {
            l_ = simplify(l);
            r_ = simplify(r);
            Involution(l_, r_);
        }
        default             : AST;
    }
}

main() {
    varsTree = putVarsIntoTree();
    s = readUntil("\n");
    println(s2RPN(s));
    println(RPN2s(s2RPN(s)));
    println(RPN2d(s2RPN(s), varsTree));
    println(AST2s(simplify(s2AST(s))));
    quit(0);
}
