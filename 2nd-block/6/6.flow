// 6) Реализуйте калькулятор для обратной польской записи (RPN) арифметических выражений.
// Напишите функции перевода арифметический выражений в RPN и наоборот.
import runtime;
import string;
import math/math;
import sys/system;
import lingo/pegcode/parsic;
import lingo/pegcode/driver;

ArithmeticsExpression ::= Multiplication, Division, Addition, Substruction, Variable, Double;

Multiplication(left : ArithmeticsExpression, right : ArithmeticsExpression);
Division      (left : ArithmeticsExpression, right : ArithmeticsExpression);
Addition      (left : ArithmeticsExpression, right : ArithmeticsExpression);
Substruction  (left : ArithmeticsExpression, right : ArithmeticsExpression);
Variable      (var  : string);
Double        (val  : double);

calcGrammarInited : ref Maybe<[PegOp]> = ref None();

arithmeticsGrammar() {
    onlyOnce(calcGrammarInited, \ -> {
        compilePegGrammar("#include C:\Users\egork\source\flow9\labs\2nd-block\5\arithmetics.lingo")
    });
}

RPNGrammar() {
    onlyOnce(calcGrammarInited, \ -> {
        compilePegGrammar("#include C:\Users\egork\source\flow9\labs\2nd-block\6\rpn.lingo")
    });
}

AST2RPN(AST: Exp) -> {
    switch (AST) {
        Multiplication(l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), "*)"]);
        Division      (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), "/)"]);
        Addition      (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), "+)"]);
        Substruction  (l, r): concatStrings(["(", AST2RPN(l), " ", AST2RPN(r), "-)"]);
        Double        (val) : d2s(val);
        Variable      (var) : var;
    }
}

RNP2AST(RPN: Exp) -> Exp {
    parsic(compilePegGrammar("#include C:\Users\egork\source\flow9\labs\2nd-block\6\rpn.lingo"), RPN, defaultPegActions);
}

AST2s(AST: Exp) -> string {
    switch (AST) {
        Multiplication(l, r): concatStrings(["(", AST2s(l), "*", AST2s(r), ")"]);
        Division      (l, r): concatStrings(["(", AST2s(l), "/", AST2s(r), ")"]);
        Addition      (l, r): concatStrings(["(", AST2s(l), "+", AST2s(r), ")"]);
        Substruction  (l, r): concatStrings(["(", AST2s(l), "-", AST2s(r), ")"]);
        Double        (val) : d2s(val);
        Variable      (var) : var;
    }
}

s2AST(s: string) {
    parsic(compilePegGrammar(arithmetics_grammar), s, defaultPegActions);
}

AST2d(AST: Exp, varsTree: Tree<string, double>) -> double {
    switch (AST) {
        Multiplication(l, r): AST2d(l, varsTree) * AST2d(r, varsTree);
        Division      (l, r): AST2d(l, varsTree) / AST2d(r, varsTree);
        Addition      (l, r): AST2d(l, varsTree) + AST2d(r, varsTree);
        Substruction  (l, r): AST2d(l, varsTree) - AST2d(r, varsTree);
        Double        (val) : val;
        Variable      (var) : lookupTreeDef(varsTree, var, doubleMin);
    }
}

s2RPN(s : string) -> string {
    AST2RPN(s2AST(s));
}

RPN2s(s : string) -> string {
    AST2s(RNP2AST(s));
}

putVarInTree() -> Tree<string, double> {
    vars = strSplit(getUrlParameter("Variables"), ",");
    fold(vars, makeTree(), \tree, var -> {setTree(tree, var, s2d(getUrlParameter(var)))});
}

main() {
    s = readUntil("\n");
    println(s2RPN(s));
    println(RPN2s(s2RPN(s)));
    quit(0);
}
