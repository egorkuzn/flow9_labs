// Кузнецов Егор, НГУ, 2022
// 4) Дан массив целых чисел [n_1,...,n_k] и число m.
// Найти все пары индексов (i, j) такие, что n_i + n_j == m.
// Сигнатура функции: inds(a : [int], m : int) -> [Pair<int, int>].
// Усложнение: сделать эту функцию сложности O(n log(n)), а не O(n^2).
// Использовать функции: foldi, makeTree, setTree, lookupTree.
import runtime;
import algorithms;

inds(int_array : [int], m : int) -> [Pair<int, int>];
whileSmallerThanM(int_array : [int], left_boundary : int, right_boundary : ref int, m : int) -> void;
whileEqualM(int_array : [int], left_boundary : int, right_boundary : int, m : int, delta : int, res : ref [Pair<int, int>]) -> void;

whileSmallerThanM(int_array, left_boundary, right_boundary, m){
    if((^right_boundary > 0) && (int_array[left_boundary] + int_array[^right_boundary] > m)){
        right_boundary := ^right_boundary - 1;
        whileSmallerThanM(int_array, left_boundary, right_boundary, m);
    }
}

whileEqualM(int_array, left_boundary, right_boundary, m, delta, res){
    if((right_boundary - delta >= 0) && (left_boundary < right_boundary - delta) && (int_array[left_boundary] + int_array[right_boundary - delta] == m)){
        res := concat(^res, [Pair(left_boundary, right_boundary + delta)]);
        delta_plus_one = delta + 1;
        whileEqualM(int_array, left_boundary, right_boundary, m, delta_plus_one, res);
    }
}

inds(int_array, m){
    int_array_sorted = sort(int_array);
    res: ref [Pair<int, int>] = ref [];
    right_boundary : ref int = ref length(int_array) - 1;

    mapi(int_array, \left_boundary, v -> {
        whileSmallerThanM(int_array_sorted, left_boundary, right_boundary, m);        
        delta = 0;
        whileEqualM(int_array_sorted, left_boundary, ^right_boundary, m, delta, res);
        v;
    });

    ^res;
}

main(){
    int_array = [1, 1, 1, 1, 1, 1];
    m = 2;
    println(inds(int_array, m));
}
